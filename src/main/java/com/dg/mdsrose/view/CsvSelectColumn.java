package com.dg.mdsrose.view;

import com.dg.mdsrose.util.CsvDataset;
import org.apache.commons.lang3.tuple.Pair;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public class CsvSelectColumn extends JFrame implements ActionListener {
    private JPanel selectColumnPanel;
    private JList columnList;
    private JButton confirmButton;

    private final String path;
    private Map<Integer, String> selectedColumns = new HashMap<>();
    private List<Pair<Integer, String>> csvColumns;

    public CsvSelectColumn(String path) {
        this.setTitle("Select Column");
        this.setContentPane(selectColumnPanel);
        this.setPreferredSize(new Dimension(300, 300));
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.pack();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        this.columnList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        this.path = path;
        populateList();
        confirmButton.addActionListener(this);
    }

    private void populateList() {
        CsvDataset csvDataset = new CsvDataset(path);
        Optional<List<Pair<Integer, String>>> optionalCsvColumns = csvDataset.getColumns();
        if (optionalCsvColumns.isEmpty()) {
            JOptionPane.showMessageDialog(
                this,
                "Error read columns from dataset.",
                "Error",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        DefaultListModel<String> listModel = new DefaultListModel<>();
        csvColumns = optionalCsvColumns.get();
        csvColumns.forEach(pair -> {
            listModel.addElement(pair.getRight());
        });
        columnList.setModel(listModel);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == confirmButton) {
            confirmColumns();
        }
    }

    private void confirmColumns() {
        if (checkIfColumnSelected()) {
            JOptionPane.showMessageDialog(
                this,
                "Select at least one column.",
                "Error",
                JOptionPane.ERROR_MESSAGE
            );
            return;
        }
        List<String> selectedValuesList = columnList.getSelectedValuesList();
        csvColumns.forEach(pair -> {
            if (selectedValuesList.contains(pair.getRight())) {
                selectedColumns.put(pair.getLeft()+1, pair.getRight());
            }
        });
        new SelectShapeAndColor(this.path, selectedColumns);
        this.dispose();
    }

    private boolean checkIfColumnSelected() {
        return columnList.getSelectedValuesList().isEmpty();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        selectColumnPanel = new JPanel();
        selectColumnPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        columnList = new JList();
        selectColumnPanel.add(columnList, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        confirmButton = new JButton();
        confirmButton.setText("Confirm");
        selectColumnPanel.add(confirmButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return selectColumnPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }


}
